/*
 * =========================================
 * C√ìDIGO ESP32 - SERVIDOR WEB CON MESSAGING
 * =========================================
 * 
 * Este c√≥digo implementa un servidor web en ESP32 que:
 * - Se conecta a WiFi
 * - Recibe mensajes HTTP POST en formato JSON
 * - Procesa comandos con formato "N1A123"
 * - Responde con confirmaciones JSON
 * - Maneja CORS para comunicaci√≥n web
 * 
 * Autor: Sistema de Monitoreo ESP32
 * Fecha: 2024
 */

#include <WiFi.h>        // Librer√≠a para conectividad WiFi
#include <WebServer.h>   // Librer√≠a para servidor HTTP
#include <ArduinoJson.h> // Librer√≠a para manejo de JSON

// ===============================
// CONFIGURACI√ìN DE RED WIFI
// ===============================
const char* ssid = "TU_WIFI_NOMBRE";         // Cambia por el nombre de tu red WiFi
const char* password = "TU_WIFI_PASSWORD";   // Cambia por la contrase√±a de tu WiFi

// ===============================
// CONFIGURACI√ìN DEL SERVIDOR
// ===============================
WebServer server(80);  // Crear servidor en puerto 80 (HTTP est√°ndar)

// ===============================
// VARIABLES GLOBALES
// ===============================
String lastMessage = "";      // √öltimo mensaje recibido
String nodeStatus = "idle";   // Estado actual del nodo
int messageCount = 0;         // Contador de mensajes recibidos

// ===============================
// CONFIGURACI√ìN INICIAL
// ===============================
void setup() {
  // Inicializar comunicaci√≥n serie para debugging
  Serial.begin(115200);
  Serial.println("\n=== INICIANDO ESP32 SERVIDOR WEB ===");
  
  // Configurar pines si es necesario (ejemplo)
  // pinMode(LED_BUILTIN, OUTPUT);
  // digitalWrite(LED_BUILTIN, LOW);
  
  // Inicializar conexi√≥n WiFi
  inicializarWiFi();
  
  // Configurar rutas del servidor web
  configurarRutasServidor();
  
  // Iniciar el servidor
  server.begin();
  Serial.println("‚úÖ Servidor HTTP iniciado correctamente");
  Serial.println("üì° Esperando conexiones...");
}

// ===============================
// BUCLE PRINCIPAL
// ===============================
void loop() {
  // Manejar solicitudes HTTP entrantes
  server.handleClient();
  
  // Aqu√≠ puedes agregar otras tareas del ESP32
  // Por ejemplo: leer sensores, controlar actuadores, etc.
  
  // Peque√±a pausa para evitar sobrecarga del procesador
  delay(10);
}

// ===============================
// FUNCI√ìN: INICIALIZAR WIFI
// ===============================
void inicializarWiFi() {
  Serial.print("üîó Conectando a WiFi: ");
  Serial.println(ssid);
  
  // Iniciar conexi√≥n WiFi
  WiFi.begin(ssid, password);
  
  // Esperar hasta conectar (con timeout impl√≠cito)
  int intentos = 0;
  while (WiFi.status() != WL_CONNECTED && intentos < 50) {
    delay(500);
    Serial.print(".");
    intentos++;
  }
  
  // Verificar si se conect√≥ exitosamente
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi conectado!");
    Serial.print("üìç Direcci√≥n IP: ");
    Serial.println(WiFi.localIP());
    Serial.print("üåê Accede desde: http://");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå Error: No se pudo conectar a WiFi");
    Serial.println("üîß Verifica las credenciales y reinicia el ESP32");
  }
}

// ===============================
// FUNCI√ìN: CONFIGURAR RUTAS DEL SERVIDOR
// ===============================
void configurarRutasServidor() {
  Serial.println("üõ£Ô∏è  Configurando rutas del servidor...");
  
  // RUTA 1: P√°gina principal (GET /)
  server.on("/", HTTP_GET, []() {
    manejarPaginaPrincipal();
  });
  
  // RUTA 2: Endpoint principal para recibir mensajes (POST /api/send)
  server.on("/api/send", HTTP_POST, []() {
    manejarMensajeRecibido();
  });
  
  // RUTA 3: Endpoint de prueba (GET /api/test)
  server.on("/api/test", HTTP_GET, []() {
    manejarPruebaSistema();
  });
  
  // RUTA 4: Estado del nodo (GET /api/status)
  server.on("/api/status", HTTP_GET, []() {
    manejarEstadoNodo();
  });
  
  // RUTA 5: Manejo de preflight CORS (OPTIONS)
  server.on("/api/send", HTTP_OPTIONS, []() {
    manejarPreflightCORS();
  });
  
  // RUTA 6: P√°gina 404 para rutas no encontradas
  server.onNotFound([]() {
    manejarPaginaNoEncontrada();
  });
  
  Serial.println("‚úÖ Rutas configuradas correctamente");
}

// ===============================
// MANEJADOR: P√ÅGINA PRINCIPAL
// ===============================
void manejarPaginaPrincipal() {
  Serial.println("üìÑ Solicitud GET / - P√°gina principal");
  
  // HTML simple para mostrar informaci√≥n del ESP32
  String html = "<!DOCTYPE html><html><head>";
  html += "<title>ESP32 Node Monitor</title>";
  html += "<meta charset='UTF-8'>";
  html += "</head><body>";
  html += "<h1>üîß ESP32 Node Monitor</h1>";
  html += "<p><strong>Estado:</strong> " + nodeStatus + "</p>";
  html += "<p><strong>IP:</strong> " + WiFi.localIP().toString() + "</p>";
  html += "<p><strong>√öltimo mensaje:</strong> " + lastMessage + "</p>";
  html += "<p><strong>Mensajes recibidos:</strong> " + String(messageCount) + "</p>";
  html += "<hr><p><em>Servidor funcionando correctamente ‚úÖ</em></p>";
  html += "</body></html>";
  
  // Enviar respuesta HTML
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "text/html", html);
}

// ===============================
// MANEJADOR: MENSAJE RECIBIDO (PRINCIPAL)
// ===============================
void manejarMensajeRecibido() {
  Serial.println("\nüì® MENSAJE RECIBIDO - POST /api/send");
  
  // Configurar headers CORS para permitir solicitudes desde navegadores
  configurarHeadersCORS();
  
  // Verificar que se recibi√≥ contenido JSON
  if (!server.hasArg("plain")) {
    Serial.println("‚ùå Error: No se recibi√≥ contenido JSON");
    enviarErrorJSON("No se recibi√≥ contenido JSON");
    return;
  }
  
  // Obtener el cuerpo de la solicitud
  String cuerpoJSON = server.arg("plain");
  Serial.println("üìù JSON recibido: " + cuerpoJSON);
  
  // Parsear el JSON recibido
  DynamicJsonDocument documento(1024);
  DeserializationError error = deserializeJson(documento, cuerpoJSON);
  
  // Verificar que el JSON es v√°lido
  if (error) {
    Serial.println("‚ùå Error al parsear JSON: " + String(error.c_str()));
    enviarErrorJSON("JSON inv√°lido");
    return;
  }
  
  // Extraer datos del JSON
  String nodeId = documento["nodeId"] | "";
  String mensaje = documento["message"] | "";
  
  Serial.println("üéØ Node ID: " + nodeId);
  Serial.println("üí¨ Mensaje: " + mensaje);
  
  // Procesar el mensaje
  bool exito = procesarMensaje(nodeId, mensaje);
  
  // Enviar respuesta apropiada
  if (exito) {
    enviarExitoJSON("Mensaje procesado correctamente");
    messageCount++;
    lastMessage = mensaje;
  } else {
    enviarErrorJSON("Error al procesar el mensaje");
  }
}

// ===============================
// FUNCI√ìN: PROCESAR MENSAJE
// ===============================
bool procesarMensaje(String nodeId, String mensaje) {
  Serial.println("\nüîÑ PROCESANDO MENSAJE...");
  
  // Verificar formato b√°sico del mensaje (debe ser N + nodeId + funci√≥n + n√∫meros)
  String prefijoEsperado = "N" + nodeId;
  
  if (!mensaje.startsWith(prefijoEsperado)) {
    Serial.println("‚ùå El mensaje no corresponde a este nodo");
    Serial.println("   Esperado: " + prefijoEsperado + "...");
    Serial.println("   Recibido: " + mensaje);
    return false;
  }
  
  // Verificar longitud del mensaje (debe ser exactamente 6 caracteres)
  if (mensaje.length() != 6) {
    Serial.println("‚ùå Longitud de mensaje incorrecta: " + String(mensaje.length()));
    Serial.println("   Debe ser exactamente 6 caracteres");
    return false;
  }
  
  // Extraer componentes del mensaje
  // Formato: N[nodeId][funci√≥n][n√∫mero][param1][param2]
  // Ejemplo: N1A123 = Nodo 1, Funci√≥n A, N√∫mero 1, Par√°metros 2,3
  
  char funcion = mensaje.charAt(2);    // Tercer car√°cter (A, B, C, D, E)
  char numero = mensaje.charAt(3);     // Cuarto car√°cter (0-9)
  char param1 = mensaje.charAt(4);     // Quinto car√°cter (0-9)
  char param2 = mensaje.charAt(5);     // Sexto car√°cter (0-9)
  
  Serial.println("üìã DESGLOSE DEL MENSAJE:");
  Serial.println("   Nodo: " + nodeId);
  Serial.println("   Funci√≥n: " + String(funcion));
  Serial.println("   N√∫mero: " + String(numero));
  Serial.println("   Par√°metro 1: " + String(param1));
  Serial.println("   Par√°metro 2: " + String(param2));
  
  // Ejecutar acci√≥n seg√∫n la funci√≥n
  bool resultado = ejecutarFuncion(funcion, numero, param1, param2);
  
  if (resultado) {
    Serial.println("‚úÖ Mensaje procesado exitosamente");
    nodeStatus = "active";
  } else {
    Serial.println("‚ùå Error al ejecutar la funci√≥n");
    nodeStatus = "error";
  }
  
  return resultado;
}

// ===============================
// FUNCI√ìN: EJECUTAR FUNCI√ìN
// ===============================
bool ejecutarFuncion(char funcion, char numero, char param1, char param2) {
  Serial.println("‚öôÔ∏è  EJECUTANDO FUNCI√ìN: " + String(funcion));
  
  // Convertir caracteres a n√∫meros para facilitar el procesamiento
  int num = numero - '0';    // Convertir char a int
  int p1 = param1 - '0';     // Convertir char a int
  int p2 = param2 - '0';     // Convertir char a int
  
  switch (funcion) {
    case 'A':
      return ejecutarFuncionA(num, p1, p2);
      
    case 'B':
      return ejecutarFuncionB(num, p1, p2);
      
    case 'C':
      return ejecutarFuncionC(num, p1, p2);
      
    case 'D':
      return ejecutarFuncionD(num, p1, p2);
      
    case 'E':
      return ejecutarFuncionE(num, p1, p2);
      
    default:
      Serial.println("‚ùå Funci√≥n desconocida: " + String(funcion));
      return false;
  }
}

// ===============================
// FUNCI√ìN A: CONTROL ZONA A
// ===============================
bool ejecutarFuncionA(int numero, int param1, int param2) {
  Serial.println("üîµ FUNCI√ìN A - Control Zona A");
  Serial.println("   N√∫mero: " + String(numero));
  Serial.println("   Par√°metros: " + String(param1) + ", " + String(param2));
  
  // AQU√ç IMPLEMENTA TU L√ìGICA ESPEC√çFICA PARA LA ZONA A
  // Ejemplos:
  // - Controlar rel√©s
  // - Activar motores
  // - Configurar sensores
  
  // Ejemplo b√°sico: controlar LED seg√∫n par√°metros
  /*
  if (param1 == 1) {
    digitalWrite(LED_BUILTIN, HIGH);  // Encender LED
    Serial.println("   LED encendido");
  } else {
    digitalWrite(LED_BUILTIN, LOW);   // Apagar LED
    Serial.println("   LED apagado");
  }
  */
  
  Serial.println("‚úÖ Funci√≥n A ejecutada correctamente");
  return true;  // Retornar true si la operaci√≥n fue exitosa
}

// ===============================
// FUNCI√ìN B: CONTROL ZONA B
// ===============================
bool ejecutarFuncionB(int numero, int param1, int param2) {
  Serial.println("üü¢ FUNCI√ìN B - Control Zona B");
  Serial.println("   N√∫mero: " + String(numero));
  Serial.println("   Par√°metros: " + String(param1) + ", " + String(param2));
  
  // AQU√ç IMPLEMENTA TU L√ìGICA ESPEC√çFICA PARA LA ZONA B
  
  Serial.println("‚úÖ Funci√≥n B ejecutada correctamente");
  return true;
}

// ===============================
// FUNCI√ìN C: CONTROL SALIDAS
// ===============================
bool ejecutarFuncionC(int numero, int param1, int param2) {
  Serial.println("üü° FUNCI√ìN C - Control Salidas Digitales");
  Serial.println("   N√∫mero: " + String(numero));
  Serial.println("   Par√°metros: " + String(param1) + ", " + String(param2));
  
  // AQU√ç IMPLEMENTA TU L√ìGICA PARA CONTROL DE SALIDAS
  // Ejemplo: controlar m√∫ltiples salidas digitales
  
  Serial.println("‚úÖ Funci√≥n C ejecutada correctamente");
  return true;
}

// ===============================
// FUNCI√ìN D: CONFIGURACI√ìN
// ===============================
bool ejecutarFuncionD(int numero, int param1, int param2) {
  Serial.println("üü† FUNCI√ìN D - Configuraci√≥n del Sistema");
  Serial.println("   N√∫mero: " + String(numero));
  Serial.println("   Par√°metros: " + String(param1) + ", " + String(param2));
  
  // AQU√ç IMPLEMENTA L√ìGICA DE CONFIGURACI√ìN
  // Ejemplos:
  // - Cambiar configuraciones
  // - Guardar par√°metros en EEPROM
  // - Reiniciar configuraciones
  
  if (numero == 0 && param1 == 0 && param2 == 0) {
    Serial.println("   Reset de configuraci√≥n solicitado");
    // Implementar reset aqu√≠
  }
  
  Serial.println("‚úÖ Funci√≥n D ejecutada correctamente");
  return true;
}

// ===============================
// FUNCI√ìN E: RESET SISTEMA
// ===============================
bool ejecutarFuncionE(int numero, int param1, int param2) {
  Serial.println("üî¥ FUNCI√ìN E - Reset del Sistema");
  Serial.println("   N√∫mero: " + String(numero));
  Serial.println("   Par√°metros: " + String(param1) + ", " + String(param2));
  
  // AQU√ç IMPLEMENTA L√ìGICA DE RESET
  
  if (numero == 9 && param1 == 9 && param2 == 9) {
    Serial.println("   ‚ö†Ô∏è  RESET COMPLETO SOLICITADO");
    // Implementar reset completo aqu√≠
    // ESP.restart();  // Descomentar para reiniciar el ESP32
  }
  
  Serial.println("‚úÖ Funci√≥n E ejecutada correctamente");
  return true;
}

// ===============================
// MANEJADOR: PRUEBA DEL SISTEMA
// ===============================
void manejarPruebaSistema() {
  Serial.println("üß™ Solicitud GET /api/test - Prueba del sistema");
  
  configurarHeadersCORS();
  
  // Crear respuesta JSON de prueba
  DynamicJsonDocument respuesta(512);
  respuesta["status"] = "ok";
  respuesta["message"] = "ESP32 funcionando correctamente";
  respuesta["ip"] = WiFi.localIP().toString();
  respuesta["uptime"] = millis();
  respuesta["freeHeap"] = ESP.getFreeHeap();
  
  String jsonString;
  serializeJson(respuesta, jsonString);
  
  server.send(200, "application/json", jsonString);
  Serial.println("‚úÖ Respuesta de prueba enviada");
}

// ===============================
// MANEJADOR: ESTADO DEL NODO
// ===============================
void manejarEstadoNodo() {
  Serial.println("üìä Solicitud GET /api/status - Estado del nodo");
  
  configurarHeadersCORS();
  
  // Crear respuesta JSON con estado completo
  DynamicJsonDocument respuesta(512);
  respuesta["nodeId"] = "1";  // Cambiar por el ID real del nodo
  respuesta["status"] = nodeStatus;
  respuesta["lastMessage"] = lastMessage;
  respuesta["messageCount"] = messageCount;
  respuesta["uptime"] = millis();
  respuesta["wifiRSSI"] = WiFi.RSSI();
  respuesta["freeHeap"] = ESP.getFreeHeap();
  
  String jsonString;
  serializeJson(respuesta, jsonString);
  
  server.send(200, "application/json", jsonString);
}

// ===============================
// MANEJADOR: PREFLIGHT CORS
// ===============================
void manejarPreflightCORS() {
  Serial.println("üîÑ Solicitud OPTIONS - Preflight CORS");
  
  configurarHeadersCORS();
  server.send(200, "text/plain", "");
}

// ===============================
// MANEJADOR: P√ÅGINA NO ENCONTRADA
// ===============================
void manejarPaginaNoEncontrada() {
  Serial.println("‚ùì Ruta no encontrada: " + server.uri());
  
  configurarHeadersCORS();
  
  DynamicJsonDocument respuesta(256);
  respuesta["error"] = "Ruta no encontrada";
  respuesta["path"] = server.uri();
  respuesta["method"] = server.method();
  
  String jsonString;
  serializeJson(respuesta, jsonString);
  
  server.send(404, "application/json", jsonString);
}

// ===============================
// FUNCI√ìN: CONFIGURAR HEADERS CORS
// ===============================
void configurarHeadersCORS() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
  server.sendHeader("Access-Control-Max-Age", "86400");
}

// ===============================
// FUNCI√ìN: ENVIAR ERROR JSON
// ===============================
void enviarErrorJSON(String mensaje) {
  DynamicJsonDocument respuesta(256);
  respuesta["success"] = false;
  respuesta["error"] = mensaje;
  respuesta["timestamp"] = millis();
  
  String jsonString;
  serializeJson(respuesta, jsonString);
  
  server.send(400, "application/json", jsonString);
  Serial.println("‚ùå Error enviado: " + mensaje);
}

// ===============================
// FUNCI√ìN: ENVIAR √âXITO JSON
// ===============================
void enviarExitoJSON(String mensaje) {
  DynamicJsonDocument respuesta(256);
  respuesta["success"] = true;
  respuesta["message"] = mensaje;
  respuesta["timestamp"] = millis();
  
  String jsonString;
  serializeJson(respuesta, jsonString);
  
  server.send(200, "application/json", jsonString);
  Serial.println("‚úÖ √âxito enviado: " + mensaje);
}

// ===============================
// FIN DEL C√ìDIGO
// ===============================

/*
 * ==========================================
 * INSTRUCCIONES DE INSTALACI√ìN Y USO
 * ==========================================
 * 
 * 1. INSTALAR LIBRER√çAS EN ARDUINO IDE:
 *    - WiFi.h (incluida en ESP32)
 *    - WebServer.h (incluida en ESP32)
 *    - ArduinoJson.h (buscar en Library Manager)
 * 
 * 2. CONFIGURAR CREDENCIALES WIFI:
 *    - Cambiar "TU_WIFI_NOMBRE" por el nombre de tu red
 *    - Cambiar "TU_WIFI_PASSWORD" por tu contrase√±a
 * 
 * 3. CARGAR C√ìDIGO AL ESP32:
 *    - Seleccionar la placa ESP32 en Arduino IDE
 *    - Compilar y subir el c√≥digo
 * 
 * 4. VERIFICAR FUNCIONAMIENTO:
 *    - Abrir Monitor Serie (115200 baudios)
 *    - Anotar la direcci√≥n IP que aparece
 *    - Actualizar la IP en tu interfaz web
 * 
 * 5. PROBAR CONEXI√ìN:
 *    - Acceder a http://IP_DEL_ESP32 en el navegador
 *    - Usar NetworkDiagnostics en la interfaz web
 * 
 * ==========================================
 * FORMATO DE MENSAJES SOPORTADOS
 * ==========================================
 * 
 * Estructura: N[nodeId][funci√≥n][n√∫mero][param1][param2]
 * 
 * Ejemplos:
 * - N1A123: Nodo 1, Funci√≥n A, N√∫mero 1, Par√°metros 2,3
 * - N2B456: Nodo 2, Funci√≥n B, N√∫mero 4, Par√°metros 5,6
 * - N1D000: Nodo 1, Reset configuraci√≥n
 * - N1E999: Nodo 1, Reset completo
 * 
 * ==========================================
 */


        String    nodeJS    = "nodoId";
        String    commJS    = "comu";
        String    zoneAJS   = "zoneA";
        String    zoneBJS   = "zoneB";
        String    output1JS = "output1";
        String    output2JS = "output2";
        String    fuenteJS  = "fuente";